#!/bin/bash

# Script to run tests with ptrace-lockdep
# This is a CMake template file that gets configured during build

set -e

PROJECT_DIR="@CMAKE_SOURCE_DIR@"
BUILD_DIR="@CMAKE_BINARY_DIR@"
PTRACE_LOCKDEP="$BUILD_DIR/ptrace-lockdep"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=======================================${NC}"
echo -e "${BLUE}Running Deadlock Detection Tests${NC}"
echo -e "${BLUE}=======================================${NC}"
echo ""

# Check if ptrace-lockdep exists
if [ ! -f "$PTRACE_LOCKDEP" ]; then
    echo -e "${RED}Error: ptrace-lockdep not found at $PTRACE_LOCKDEP${NC}"
    exit 1
fi

# Check if we can use ptrace (need appropriate permissions)
if [ "$(cat /proc/sys/kernel/yama/ptrace_scope 2>/dev/null || echo 1)" != "0" ]; then
    echo -e "${YELLOW}Warning: ptrace_scope is restricted. You may need to run:${NC}"
    echo -e "${YELLOW}  echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope${NC}"
    echo ""
fi

# Function to run a single test
run_test() {
    local test_name="$1"
    local test_executable="$BUILD_DIR/$test_name"
    local test_timeout="${2:-10}"
    local ptrace_args="${3:--a -c -t 8 -v}"

    echo -e "${BLUE}Running test: $test_name${NC}"
    echo "Test executable: $test_executable"
    echo "Ptrace args: $ptrace_args"
    echo ""

    if [ ! -f "$test_executable" ]; then
        echo -e "${RED}Test executable not found: $test_executable${NC}"
        return 1
    fi

    # Start the test program in background
    echo "Starting test program..."
    timeout ${test_timeout} "$test_executable" &
    local test_pid=$!

    # Give it a moment to start
    sleep 0.5

    # Check if the process is still running
    if ! kill -0 $test_pid 2>/dev/null; then
        echo -e "${YELLOW}Test program exited quickly, checking with short timeout...${NC}"
        # Try a quick analysis
        timeout 2 "$test_executable" &
        local quick_pid=$!
        sleep 0.2

        if kill -0 $quick_pid 2>/dev/null; then
            echo "Running ptrace-lockdep on PID: $quick_pid"
            timeout 3 "$PTRACE_LOCKDEP" $ptrace_args $quick_pid || true
            kill $quick_pid 2>/dev/null || true
        else
            echo -e "${YELLOW}Test program completed too quickly for ptrace analysis${NC}"
        fi
    else
        echo "Running ptrace-lockdep on PID: $test_pid"
        # Run ptrace-lockdep to analyze the test program
        timeout 5 "$PTRACE_LOCKDEP" $ptrace_args $test_pid || true

        # Clean up the test process
        kill $test_pid 2>/dev/null || true
        wait $test_pid 2>/dev/null || true
    fi

    echo ""
    echo -e "${GREEN}Test $test_name completed${NC}"
    echo "----------------------------------------"
    echo ""
}

# Function to run LD_PRELOAD test
run_preload_test() {
    local test_name="$1"
    local test_executable="$BUILD_DIR/$test_name"

    echo -e "${BLUE}Running LD_PRELOAD test: $test_name${NC}"
    echo "Test executable: $test_executable"
    echo ""

    if [ ! -f "$test_executable" ]; then
        echo -e "${RED}Test executable not found: $test_executable${NC}"
        return 1
    fi

    if [ ! -f "$BUILD_DIR/liblockdep_interpose.so" ]; then
        echo -e "${RED}LD_PRELOAD library not found: $BUILD_DIR/liblockdep_interpose.so${NC}"
        return 1
    fi

    echo "Running with LD_PRELOAD..."
    LD_PRELOAD="$BUILD_DIR/liblockdep_interpose.so" timeout 10 "$test_executable" || true

    echo ""
    echo -e "${GREEN}LD_PRELOAD test $test_name completed${NC}"
    echo "----------------------------------------"
    echo ""
}

# Create output directory for reports
mkdir -p "$BUILD_DIR/test_reports"

echo -e "${YELLOW}Testing approach 1: LD_PRELOAD interposition${NC}"
echo "============================================="
echo ""

# Run tests with LD_PRELOAD first
for test in t01_simple_lock_order t02_classic_deadlock t03_nested_deadlock t04_circular_deadlock t05_dining_philosophers t06_dynamic_locks t07_recursive_locks t08_deadlock_avoidance_trylock t09_deadlock_avoidance_timeout; do
    if [ -f "$BUILD_DIR/$test" ]; then
        run_preload_test "$test"
    else
        echo -e "${YELLOW}Skipping $test (not built)${NC}"
    fi
done

echo ""
echo -e "${YELLOW}Testing approach 2: ptrace-based monitoring${NC}"
echo "============================================"
echo ""

# Run tests with ptrace-lockdep
for test in t01_simple_lock_order t02_classic_deadlock t03_nested_deadlock t04_circular_deadlock t05_dining_philosophers t06_dynamic_locks t07_recursive_locks t08_deadlock_avoidance_trylock t09_deadlock_avoidance_timeout; do
    if [ -f "$BUILD_DIR/$test" ]; then
        case $test in
            t02_classic_deadlock|t03_nested_deadlock|t04_circular_deadlock)
                # These tests are designed to deadlock, so use shorter timeout
                run_test "$test" 15 "-a -c -t 5 -v -o $BUILD_DIR/test_reports/${test}_ptrace.txt"
                ;;
            t05_dining_philosophers)
                # Dining philosophers might take longer
                run_test "$test" 20 "-a -c -t 8 -v -o $BUILD_DIR/test_reports/${test}_ptrace.txt"
                ;;
            *)
                # Regular tests
                run_test "$test" 12 "-a -c -t 6 -v -o $BUILD_DIR/test_reports/${test}_ptrace.txt"
                ;;
        esac
    else
        echo -e "${YELLOW}Skipping $test (not built)${NC}"
    fi
done

echo ""
echo -e "${GREEN}All tests completed!${NC}"
echo ""
echo "Test reports saved in: $BUILD_DIR/test_reports/"
echo ""
echo -e "${BLUE}Summary:${NC}"
echo "- LD_PRELOAD approach: High precision, low overhead"
echo "- ptrace approach: Works with unmodified binaries, can analyze existing deadlocks"
echo ""
echo "Check the generated reports for detailed analysis results."
